version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medusa}
      POSTGRES_USER: ${POSTGRES_USER:-medusa}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medusa}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - medusa_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medusa"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    networks:
      - medusa_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - miniodata:/data
    networks:
      - medusa_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  medusa:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-medusa}:${POSTGRES_PASSWORD:-medusa}@postgres:5432/${POSTGRES_DB:-medusa}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
      PORT: 9000
      MEDUSA_ADMIN_CORS: ${MEDUSA_ADMIN_CORS:-https://store.eww-peww.com,http://localhost:7000}
      MEDUSA_STORE_CORS: ${MEDUSA_STORE_CORS:-https://store.eww-peww.com}
      MEDUSA_BACKEND_URL: ${MEDUSA_BACKEND_URL:-https://store.eww-peww.com}
      STORE_CORS: ${STORE_CORS:-https://store.eww-peww.com}
      ADMIN_CORS: ${ADMIN_CORS:-https://store.eww-peww.com}
      # MinIO/S3 Configuration
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: ${S3_BUCKET:-medusa-media}
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_FORCE_PATH_STYLE: "true"
    ports:
      - "9000:9000"
    networks:
      - medusa_net

  storefront:
    build:
      context: .
      dockerfile: Dockerfile.storefront
    restart: unless-stopped
    depends_on:
      - medusa
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${NEXT_PUBLIC_MEDUSA_BACKEND_URL:-https://store.eww-peww.com}
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-https://store.eww-peww.com}
    ports:
      - "3000:3000"
    networks:
      - medusa_net

networks:
  medusa_net:
    driver: bridge

volumes:
  pgdata:
  redisdata:
  miniodata: